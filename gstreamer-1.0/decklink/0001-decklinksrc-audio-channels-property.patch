From 6e987bad43dc0e073956d3000b3e67e753bf5f46 Mon Sep 17 00:00:00 2001
From: Vincent Tabard <v@skyrock.com>
Date: Tue, 22 Apr 2014 23:20:31 +0200
Subject: [PATCH] decklinksrc: add an audio-channels property to indicate how
 many audio channels (2, 8 ou 16) we should extract from the SDI signal

---
 sys/decklink/gstdecklink.cpp    | 88 +++++++++++++++++++++++++++++++++++++++++
 sys/decklink/gstdecklink.h      | 10 +++++
 sys/decklink/gstdecklinksrc.cpp | 51 +++++++++++++-----------
 sys/decklink/gstdecklinksrc.h   |  1 +
 4 files changed, 127 insertions(+), 23 deletions(-)

diff --git a/sys/decklink/gstdecklink.cpp b/sys/decklink/gstdecklink.cpp
index 848ff28..69e3591 100644
--- a/sys/decklink/gstdecklink.cpp
+++ b/sys/decklink/gstdecklink.cpp
@@ -22,6 +22,7 @@
 #endif
 
 #include <gst/gst.h>
+#include <gst/audio/audio-channels.h>
 #include "gstdecklink.h"
 #include "gstdecklinksrc.h"
 #include "gstdecklinksink.h"
@@ -110,6 +111,26 @@ gst_decklink_audio_connection_get_type (void)
   return (GType) id;
 }
 
+GType
+gst_decklink_audio_channels_get_type (void)
+{
+  static gsize id = 0;
+  static const GEnumValue channel_numbers[] = {
+    {GST_DECKLINK_AUDIO_CHANNELS_2, "2ch", "2 audio channels"},
+    {GST_DECKLINK_AUDIO_CHANNELS_8, "8ch", "8 audio channels"},
+    {GST_DECKLINK_AUDIO_CHANNELS_16, "16ch", "16 audio channels"},
+    {0, NULL, NULL}
+  };
+
+  if (g_once_init_enter (&id)) {
+    GType tmp =
+        g_enum_register_static ("GstDecklinkAudioChannels", channel_numbers);
+    g_once_init_leave (&id, tmp);
+  }
+
+  return (GType) id;
+}
+
 #define NTSC 10, 11, false, false
 #define PAL 12, 11, true, false
 #define HD 1, 1, false, true
@@ -190,6 +211,73 @@ gst_decklink_mode_get_template_caps (void)
   return caps;
 }
 
+static GstStructure *
+gst_decklink_audio_channels_get_structure (GstDecklinkAudioChannelsEnum n_ch)
+{
+  GstStructure * s = gst_structure_new ("audio/x-raw",
+      "format", G_TYPE_STRING, "S16LE",
+      "layout", G_TYPE_STRING, "interleaved",
+      "channels", G_TYPE_INT, n_ch,
+      "rate", G_TYPE_INT, 48000,
+      NULL);
+
+  guint64 channel_mask = 0;
+  switch (n_ch) {
+    /* FIXME: need 16 channels layout */
+    case 8:
+      channel_mask =
+        GST_AUDIO_CHANNEL_POSITION_MASK (FRONT_LEFT) |
+        GST_AUDIO_CHANNEL_POSITION_MASK (FRONT_RIGHT) |
+        GST_AUDIO_CHANNEL_POSITION_MASK (REAR_LEFT) |
+        GST_AUDIO_CHANNEL_POSITION_MASK (REAR_RIGHT) |
+        GST_AUDIO_CHANNEL_POSITION_MASK (FRONT_CENTER) |
+        GST_AUDIO_CHANNEL_POSITION_MASK (LFE1) |
+        GST_AUDIO_CHANNEL_POSITION_MASK (SIDE_LEFT) |
+        GST_AUDIO_CHANNEL_POSITION_MASK (SIDE_RIGHT);
+      break;
+    case 2:
+      channel_mask =
+        GST_AUDIO_CHANNEL_POSITION_MASK (FRONT_LEFT) |
+        GST_AUDIO_CHANNEL_POSITION_MASK (FRONT_RIGHT);
+      break;
+    default:
+      channel_mask = 0;
+      break;
+  }
+  gst_structure_set (s, "channel-mask", GST_TYPE_BITMASK, channel_mask, NULL);
+  
+  return s;
+}
+
+GstCaps *
+gst_decklink_audio_channels_get_caps (GstDecklinkAudioChannelsEnum n_ch)
+{
+  GstCaps *caps;
+
+  caps = gst_caps_new_empty ();
+  gst_caps_append_structure (caps, gst_decklink_audio_channels_get_structure (n_ch));
+
+  return caps;
+}
+
+GstCaps *
+gst_decklink_audio_channels_get_template_caps (void)
+{
+  GstCaps *caps;
+  GstStructure *s;
+
+  caps = gst_caps_new_empty ();
+  // 2, 8, 16: only possibilities according to SDK doc
+  s = gst_decklink_audio_channels_get_structure (GST_DECKLINK_AUDIO_CHANNELS_2);
+  gst_caps_append_structure (caps, s);
+  s = gst_decklink_audio_channels_get_structure (GST_DECKLINK_AUDIO_CHANNELS_8);
+  gst_caps_append_structure (caps, s);
+  s = gst_decklink_audio_channels_get_structure (GST_DECKLINK_AUDIO_CHANNELS_16);
+  gst_caps_append_structure (caps, s);
+
+  return caps;
+}
+
 typedef struct _Device Device;
 struct _Device {
   IDeckLink *decklink;
diff --git a/sys/decklink/gstdecklink.h b/sys/decklink/gstdecklink.h
index a204c78..9f2bd3d 100644
--- a/sys/decklink/gstdecklink.h
+++ b/sys/decklink/gstdecklink.h
@@ -89,6 +89,14 @@ typedef enum {
 #define GST_TYPE_DECKLINK_AUDIO_CONNECTION (gst_decklink_audio_connection_get_type ())
 GType gst_decklink_audio_connection_get_type (void);
 
+typedef enum {
+  GST_DECKLINK_AUDIO_CHANNELS_2 = 2,
+  GST_DECKLINK_AUDIO_CHANNELS_8 = 8,
+  GST_DECKLINK_AUDIO_CHANNELS_16 = 16
+} GstDecklinkAudioChannelsEnum;
+#define GST_TYPE_DECKLINK_AUDIO_CHANNELS (gst_decklink_audio_channels_get_type ())
+GType gst_decklink_audio_channels_get_type (void);
+
 typedef struct _GstDecklinkMode GstDecklinkMode;
 struct _GstDecklinkMode {
   BMDDisplayMode mode;
@@ -106,6 +114,8 @@ struct _GstDecklinkMode {
 const GstDecklinkMode * gst_decklink_get_mode (GstDecklinkModeEnum e);
 GstCaps * gst_decklink_mode_get_caps (GstDecklinkModeEnum e);
 GstCaps * gst_decklink_mode_get_template_caps (void);
+GstCaps * gst_decklink_audio_channels_get_caps (GstDecklinkAudioChannelsEnum n_ch);
+GstCaps * gst_decklink_audio_channels_get_template_caps (void);
 
 IDeckLink * gst_decklink_get_nth_device (int n);
 IDeckLinkInput * gst_decklink_get_nth_input (int n);
diff --git a/sys/decklink/gstdecklinksrc.cpp b/sys/decklink/gstdecklinksrc.cpp
index 7c2683a..cf71750 100644
--- a/sys/decklink/gstdecklinksrc.cpp
+++ b/sys/decklink/gstdecklinksrc.cpp
@@ -81,18 +81,11 @@ enum
   PROP_MODE,
   PROP_CONNECTION,
   PROP_AUDIO_INPUT,
-  PROP_DEVICE_NUMBER
+  PROP_DEVICE_NUMBER,
+  PROP_AUDIO_CHANNELS
 };
 
-static GstStaticPadTemplate gst_decklink_src_audio_src_template =
-GST_STATIC_PAD_TEMPLATE ("audiosrc",
-    GST_PAD_SRC,
-    GST_PAD_ALWAYS,
-    GST_STATIC_CAPS ("audio/x-raw, format=S16LE, channels=2, rate=48000, "
-        "layout=interleaved")
-    );
-
-/* the video source pad template is created on the fly */
+/* the audio + video source pad template is created on the fly */
 
 #define parent_class gst_decklink_src_parent_class
 G_DEFINE_TYPE (GstDecklinkSrc, gst_decklink_src, GST_TYPE_ELEMENT);
@@ -138,8 +131,17 @@ gst_decklink_src_class_init (GstDecklinkSrcClass * klass)
           (GParamFlags) (G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS |
               G_PARAM_CONSTRUCT)));
 
+  g_object_class_install_property (gobject_class, PROP_AUDIO_CHANNELS,
+      g_param_spec_enum ("audio-channels", "Audio Channels",
+          "Audio Channels to get from SDI signal (2, 8, 16)",
+          GST_TYPE_DECKLINK_AUDIO_CHANNELS,
+          GST_DECKLINK_AUDIO_CHANNELS_2,
+          (GParamFlags) (G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS |
+              G_PARAM_CONSTRUCT)));
+
   gst_element_class_add_pad_template (element_class,
-      gst_static_pad_template_get (&gst_decklink_src_audio_src_template));
+      gst_pad_template_new ("audiosrc", GST_PAD_SRC, GST_PAD_ALWAYS,
+          gst_decklink_audio_channels_get_template_caps ()));
 
   gst_element_class_add_pad_template (element_class,
       gst_pad_template_new ("videosrc", GST_PAD_SRC, GST_PAD_ALWAYS,
@@ -161,14 +163,12 @@ gst_decklink_src_init (GstDecklinkSrc * decklinksrc)
   gst_task_set_lock (decklinksrc->task, &decklinksrc->task_mutex);
 
   decklinksrc->audiosrcpad =
-      gst_pad_new_from_static_template (&gst_decklink_src_audio_src_template,
-      "audiosrc");
+      gst_pad_new_from_template (gst_element_class_get_pad_template
+      (GST_ELEMENT_CLASS (decklinksrc_class), "audiosrc"), "audiosrc");
   gst_pad_set_query_function (decklinksrc->audiosrcpad,
       GST_DEBUG_FUNCPTR (gst_decklink_src_audio_src_query));
   gst_element_add_pad (GST_ELEMENT (decklinksrc), decklinksrc->audiosrcpad);
 
-
-
   decklinksrc->videosrcpad =
       gst_pad_new_from_template (gst_element_class_get_pad_template
       (GST_ELEMENT_CLASS (decklinksrc_class), "videosrc"), "videosrc");
@@ -186,6 +186,7 @@ gst_decklink_src_init (GstDecklinkSrc * decklinksrc)
   decklinksrc->mode = GST_DECKLINK_MODE_NTSC;
   decklinksrc->connection = GST_DECKLINK_CONNECTION_SDI;
   decklinksrc->audio_connection = GST_DECKLINK_AUDIO_CONNECTION_AUTO;
+  decklinksrc->audio_channels = GST_DECKLINK_AUDIO_CHANNELS_2;
   decklinksrc->device_number = 0;
 
   decklinksrc->stop = FALSE;
@@ -238,6 +239,10 @@ gst_decklink_src_set_property (GObject * object, guint property_id,
     case PROP_DEVICE_NUMBER:
       decklinksrc->device_number = g_value_get_int (value);
       break;
+    case PROP_AUDIO_CHANNELS:
+      decklinksrc->audio_channels =
+          (GstDecklinkAudioChannelsEnum) g_value_get_enum (value);
+      break;
     default:
       G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
       break;
@@ -265,6 +270,9 @@ gst_decklink_src_get_property (GObject * object, guint property_id,
     case PROP_DEVICE_NUMBER:
       g_value_set_int (value, decklinksrc->device_number);
       break;
+    case PROP_AUDIO_CHANNELS:
+      g_value_set_enum (value, decklinksrc->audio_channels);
+      break;
     default:
       G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
       break;
@@ -509,11 +517,11 @@ gst_decklink_src_start (GstElement * element)
   }
 
   sample_depth = bmdAudioSampleType16bitInteger;
-  channels = 2;
+  channels = (int) decklinksrc->audio_channels;
   ret = decklinksrc->input->EnableAudioInput (bmdAudioSampleRate48kHz,
       sample_depth, channels);
   if (ret != S_OK) {
-    GST_ERROR ("enable video input failed");
+    GST_ERROR ("enable audio input failed");
     return FALSE;
   }
 
@@ -713,10 +721,7 @@ gst_decklink_src_send_initial_events (GstDecklinkSrc * src)
 
   /* caps */
   gst_pad_push_event (src->audiosrcpad,
-      gst_event_new_caps (gst_caps_new_simple ("audio/x-raw",
-          "format", G_TYPE_STRING, "S16LE", "channels", G_TYPE_INT, 2,
-          "rate", G_TYPE_INT, 48000, "layout", G_TYPE_STRING, "interleaved",
-          NULL)));
+      gst_event_new_caps (gst_decklink_audio_channels_get_caps (src->audio_channels)));
 
   gst_pad_push_event (src->videosrcpad,
       gst_event_new_caps (gst_decklink_mode_get_caps (src->mode)));
@@ -856,8 +861,8 @@ gst_decklink_src_task (void *priv)
   if (gst_pad_is_linked (decklinksrc->audiosrcpad)) {
     n_samples = audio_frame->GetSampleFrameCount ();
     audio_frame->GetBytes (&data);
-    audio_buffer = gst_buffer_new_and_alloc (n_samples * 2 * 2);
-    gst_buffer_fill (audio_buffer, 0, data, n_samples * 2 * 2);
+    audio_buffer = gst_buffer_new_and_alloc (n_samples * decklinksrc->audio_channels * 2);
+    gst_buffer_fill (audio_buffer, 0, data, n_samples * decklinksrc->audio_channels * 2);
 
     GST_BUFFER_TIMESTAMP (audio_buffer) =
         gst_util_uint64_scale_int (decklinksrc->num_audio_samples * GST_SECOND,
diff --git a/sys/decklink/gstdecklinksrc.h b/sys/decklink/gstdecklinksrc.h
index f071b66..9f890e3 100644
--- a/sys/decklink/gstdecklinksrc.h
+++ b/sys/decklink/gstdecklinksrc.h
@@ -82,6 +82,7 @@ struct _GstDecklinkSrc
   GstDecklinkModeEnum mode;
   GstDecklinkConnectionEnum connection;
   GstDecklinkAudioConnectionEnum audio_connection;
+  GstDecklinkAudioChannelsEnum audio_channels;
   int device_number;
 
 #ifdef _MSC_VER
-- 
1.9.1

